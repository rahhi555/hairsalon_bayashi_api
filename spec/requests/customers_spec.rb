# frozen_string_literal: true

require_relative '../rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/customers', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Customer. As you add validations to Customer, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    attributes_for(:customer)
  end

  let(:invalid_attributes) do
    attributes_for(:invalid_customer)
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CustomersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    { 'ACCEPT' => 'application/json' }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Customer.create! valid_attributes
      get api_v1_customers_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      customer = Customer.create! valid_attributes
      get api_v1_customer_url(customer), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Customer' do
        # changeメソッドはdo endで囲ってはいけないようなので、RuboCopの規約に反するが{}を使用している。
        expect {
          post api_v1_customers_url,
               params: { customer: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Customer, :count).by(1)
      end

      it 'renders a JSON response with new customer' do
        post api_v1_customers_url,
             params: { customer: valid_attributes }, headers: valid_headers, as: :json
        expect(response.content_type).to match(a_string_including('application/json'))
      end

      it 'renders a http status created' do
        post api_v1_customers_url,
             params: { customer: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
      end
    end
  end

  describe 'Post/Create REGEX' do
    subject(:post_api_v1_customers_url) do
      post api_v1_customers_url,
           params: { customer: attributes_for(:invalid_customers, trait_name) },
           headers: valid_headers, as: :json
    end

    shared_examples 'request_is_not_match_regex' do
      it 'does not create a new Customer' do
        expect {
          post_api_v1_customers_url
        }.to change(Customer, :count).by(0)
      end

      it 'response http status is unprocessable_entity' do
        post_api_v1_customers_url
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it 'response content type is application/json' do
        post_api_v1_customers_url
        expect(response.content_type).to include('application/json')
      end
    end

    context 'when name is blank' do
      let(:trait_name) { :name_is_blank }

      it_behaves_like 'request_is_not_match_regex'
    end

    context 'when name is fifty over' do
      let(:trait_name) { :name_fifty_over }

      it_behaves_like 'request_is_not_match_regex'
    end

    context 'when name not space' do
      let(:trait_name) { :name_not_space }

      it_behaves_like 'request_is_not_match_regex'
    end

    context 'when name top space' do
      let(:trait_name) { :name_top_space }

      it_behaves_like 'request_is_not_match_regex'
    end

    context 'when name end space' do
      let(:trait_name) { :name_end_space }

      it_behaves_like 'request_is_not_match_regex'
    end

    context 'when tel not number' do
      let(:trait_name) { :tel_not_number }

      it_behaves_like 'request_is_not_match_regex'
    end

    context 'when tel less ten' do
      let(:trait_name) { :tel_less_ten }

      it_behaves_like 'request_is_not_match_regex'
    end

    context 'when tel over eleven' do
      let(:trait_name) { :tel_over_eleven }

      it_behaves_like 'request_is_not_match_regex'
    end

    context 'when mail no at mark' do
      let(:trait_name) { :mail_no_at_mark }

      it_behaves_like 'request_is_not_match_regex'
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) { attributes_for(:update_customer) }
      let(:last_update_customer) { Customer.order(:updated_at).last }

      before do
        customer = Customer.create! valid_attributes
        patch api_v1_customer_url(customer),
              params: { customer: new_attributes }, headers: valid_headers, as: :json
      end

      it 'updated customer name is new name' do
        expect(last_update_customer.name).to eq new_attributes[:name]
      end

      it 'updated customer tel is new tel' do
        expect(last_update_customer.tel).to eq new_attributes[:tel]
      end

      it 'updated customer mail is new mail' do
        expect(last_update_customer.mail).to eq new_attributes[:mail]
      end

      it 'response http status ok' do
        expect(response).to have_http_status(:ok)
      end

      it 'response content type application/json' do
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the customer' do
        customer = Customer.create! valid_attributes
        patch api_v1_customer_url(customer),
              params: { customer: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to include('application/json')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested customer' do
      customer = Customer.create! valid_attributes
      expect do
        delete api_v1_customer_url(customer), headers: valid_headers, as: :json
      end.to change(Customer, :count).by(-1)
    end
  end
end
